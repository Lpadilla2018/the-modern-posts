{"version":3,"sources":["components/post-item/post-item.jsx","components/post-list/post-list.component.jsx","components/search-input/search-input.component.jsx","pages/homepage/homepage.component.jsx","components/back-button/back-button.component.jsx","components/post-info/post-info.component.jsx","components/comment-info/comment-info.component.jsx","components/comment-list/comment-list.component.jsx","components/add-comment/add-comment.component.jsx","components/custom-button/custom-button.component.jsx","components/comment-form/comment-form.component.jsx","pages/post-details/post-details.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["PostItem","title","id","navigate","useNavigate","className","onClick","PostList","posts","map","post","SearchInput","placeholder","handleChangeFunction","onChange","HomePage","setSearchInputText","event","setState","searchInput","target","value","state","this","filteredPosts","filter","toLowerCase","includes","fetch","then","response","json","React","Component","BackButton","PostInfo","body","CommentInfo","name","email","getCommentsCount","comments","length","CommentList","comment","index","AddComment","label","CustomButton","buttonText","handleOnClickFunction","CommentForm","handleOnSubmit","onSubmit","type","PostDetails","addComment","a","preventDefault","callAddCommentService","postComments","reset","console","error","message","postDetails","callPostsAndCommentsServices","method","JSON","stringify","headers","Promise","all","props","postId","catch","GetPostDetails","useParams","App","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"igBAyBeA,EAfE,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACnBC,EAAWC,cAEjB,OACE,qBAAKC,UAAU,YAAf,SACE,oBACEC,QAAS,WACPH,EAAS,SAAD,OAAUD,KAFtB,SAKGD,OCDMM,EARE,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACf,qBAAKH,UAAU,YAAf,SACGG,EAAMC,KAAI,SAACC,GAAD,OACT,cAAC,EAAD,CAAwBT,MAAOS,EAAKT,MAAOC,GAAIQ,EAAKR,IAArCQ,EAAKR,UCAXS,G,MANK,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,qBAAhB,OAClB,qBAAKR,UAAU,eAAf,SACE,uBAAOO,YAAaA,EAAaE,SAAUD,QCgDhCE,E,kDAlDb,aAAe,IAAD,8BACZ,gBAsCFC,mBAAqB,SAACC,GACpB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SArC1C,EAAKC,MAAQ,CACXd,MAAO,GACPW,YAAa,IALH,E,0CASd,WAEE,MAA+BI,KAAKD,MAA5Bd,EAAR,EAAQA,MAAOW,EAAf,EAAeA,YACTK,EAAgBhB,EAAMiB,QAAO,SAACf,GAAD,OACjCA,EAAKT,MAAMyB,cAAcC,SAASR,EAAYO,kBAGhD,OACE,gCACE,oBAAIrB,UAAU,QAAd,8BAEA,cAAC,EAAD,CACEO,YAAY,iBACZC,qBAAsBU,KAAKP,qBAG7B,sBAAKX,UAAU,gBAAf,UACE,8CACA,0BAGF,cAAC,EAAD,CAAUG,MAAOgB,S,+BAavB,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACrB,GAAD,OAAW,EAAKU,SAAS,CAAEV,MAAOA,W,GA/CvBwB,IAAMC,W,gDCYdC,G,YAXI,WACjB,IAAM/B,EAAWC,cACjB,OACE,qBAAKC,UAAU,cAAf,SACE,wBAAQC,QAAS,kBAAMH,EAAS,MAAhC,SACE,oDCGOgC,G,MAPE,SAAC,GAAD,IAAGlC,EAAH,EAAGA,MAAOmC,EAAV,EAAUA,KAAV,OACf,sBAAK/B,UAAU,YAAf,UACE,6BAAKJ,IACL,4BAAImC,SCIOC,G,YAVK,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAMF,EAAkB,EAAlBA,KAAMG,EAAY,EAAZA,MACjC,OACE,sBAAKlC,UAAU,eAAf,UACE,6BAAKiC,IACL,4BAAIC,IACJ,4BAAIH,SCcV,SAASI,EAAiBC,GACxB,OAAOA,EAASC,OAGHC,MAnBK,SAAC,GAAD,IAAGF,EAAH,EAAGA,SAAH,OAClB,sBAAKpC,UAAU,eAAf,UACE,4CAAemC,EAAiBC,GAAhC,OACCA,EAAShC,KAAI,SAACmC,EAASC,GAAV,OACZ,cAAC,EAAD,eAA6BD,GAAXC,UCGTC,G,YAXI,kBACjB,sBAAKzC,UAAU,cAAf,UACE,uBAAOO,YAAY,SACnB,uBAAOA,YAAY,UACnB,0BACEmC,MAAM,WACNnC,YAAY,mCCKHoC,G,MAVM,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,WAAYC,EAA4B,EAA5BA,sBAClC,OACE,qBAAK7C,UAAU,gBAAf,SACE,wBAAQC,QAAS4C,GAAgD,KAAjE,SACE,4BAAID,UCUGE,EATK,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eACrB,OACE,uBAAMC,SAAUD,EAAhB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAcH,WAAY,eAAgBK,KAAK,eCN/CC,E,kDACJ,aAAe,IAAD,8BACZ,gBAkCFC,WAnCc,uCAmCD,WAAOvC,GAAP,mBAAAwC,EAAA,6DAEXxC,EAAMyC,iBAEApB,EAAOrB,EAAMG,OAAO,GAAGC,MACvBkB,EAAQtB,EAAMG,OAAO,GAAGC,MACxBuB,EAAU3B,EAAMG,OAAO,GAAGC,MANrB,kBASc,EAAKsC,sBAAsBrB,EAAMC,EAAOK,GATtD,cAYT,EAAK1B,SAAS,CACZ0C,aAAa,GAAD,mBACP,EAAKtC,MAAMsC,cADJ,CAEV,CAAEtB,KAAMA,EAAMC,MAAOA,EAAOH,KAAMQ,OAKtC3B,EAAMG,OAAOyC,QApBJ,kDAsBTC,QAAQC,MAAM,yBAA0B,KAAMC,SAtBrC,0DAnCC,sDAGZ,EAAK1C,MAAQ,CACX2C,YAAa,GACbL,aAAc,IALJ,E,0CASd,WACE,OACE,sBAAKvD,UAAU,eAAf,UACE,cAAC,EAAD,eAAckB,KAAKD,MAAM2C,cACzB,cAAC,EAAD,CAAaxB,SAAUlB,KAAKD,MAAMsC,eAElC,sBAAKvD,UAAU,iBAAf,UACE,iDACA,0BAEF,cAAC,EAAD,CAAa+C,eAAgB7B,KAAKiC,aAClC,cAAC,EAAD,S,+BAKN,WACEjC,KAAK2C,iC,mCA0CP,SAAsB5B,EAAMC,EAAOK,GACjC,OAAOhB,MAAM,6CAA8C,CACzDuC,OAAQ,OACR/B,KAAMgC,KAAKC,UAAU,CACnB/B,KAAMA,EACNC,MAAOA,EACPH,KAAMQ,IAER0B,QAAS,CACP,eAAgB,qCAEjBzC,MAAK,SAACC,GAAD,OAAcA,EAASC,Y,0CAMjC,WAAgC,IAAD,OAC7BwC,QAAQC,IAAI,CACV5C,MAAM,8CAAD,OAC2CL,KAAKkD,MAAMC,SACzD7C,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC9BH,MAAM,8CAAD,OAC2CL,KAAKkD,MAAMC,OADtD,cAEH7C,MAAK,SAACC,GAAD,OAAcA,EAASC,YAE7BF,MAAK,YAA8B,IAAD,mBAA3BoC,EAA2B,KAAdxB,EAAc,KACjC,EAAKvB,SAAS,CAAE+C,YAAaA,IAC7B,EAAK/C,SAAS,CAAE0C,aAAcnB,OAE/BkC,OAAM,SAACZ,GACND,QAAQC,MAAM,2BAA4BA,EAAMC,gB,GApG9BhC,IAAMC,WAyGjBsB,ICjGf,SAASqB,IACP,IAAMF,EAAWG,cAAXH,OACN,OAAO,cAAC,EAAD,CAAaA,OAAQA,IAGfI,MAhBf,WACE,OACE,qBAAKzE,UAAU,MAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO0E,KAAK,IAAIC,QAAS,cAAC,EAAD,MACzB,cAAC,IAAD,CAAOD,KAAK,gBAAgBC,QAAS,cAACJ,EAAD,YCA9BK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtD,MAAK,YAAkD,IAA/CuD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1BZ,O","file":"static/js/main.928c26e1.chunk.js","sourcesContent":["import React from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport './post-item.styles.scss';\n\n/**\n * @param object Takes input values title and id\n * Displays title and uses id to navigate to correct page\n * @returns \n */\nconst PostItem = ({ title, id }) => {\n  const navigate = useNavigate();\n\n  return (\n    <div className='post-item'>\n      <h2\n        onClick={() => {\n          navigate(`/post/${id}`);\n        }}\n      >\n        {title}\n      </h2>\n    </div>\n  );\n};\nexport default PostItem;\n","import React from 'react';\n\nimport './post-list.styles.scss';\n\n// Components\nimport PostItem from '../post-item/post-item';\n\n/**\n * @param {*} posts List of posts object to loop through pass pass into the post-info component\n * @returns\n */\nconst PostList = ({ posts }) => (\n  <div className='post-list'>\n    {posts.map((post) => (\n      <PostItem key={post.id} title={post.title} id={post.id} />\n    ))}\n  </div>\n);\n\nexport default PostList;\n","import './search-input.styles.scss';\n\n/**\n *\n * @param object Takes input values placeholder and handleChangeFunction\n * Displays an input box with the passed in placeholder\n * When input changes invoke the passed in handleChangeFunction\n */\nconst SearchInput = ({ placeholder, handleChangeFunction }) => (\n  <div className='search-input'>\n    <input placeholder={placeholder} onChange={handleChangeFunction}></input>\n  </div>\n);\n\nexport default SearchInput;\n","import React from 'react';\nimport './homepage.styless.scss';\n\n// Components\nimport PostList from '../../components/post-list/post-list.component';\nimport SearchInput from '../../components/search-input/search-input.component';\n\nclass HomePage extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      posts: [],\n      searchInput: '',\n    };\n  }\n\n  render() {\n    // Get current state and filter posts if input value is present\n    const { posts, searchInput } = this.state;\n    const filteredPosts = posts.filter((post) =>\n      post.title.toLowerCase().includes(searchInput.toLowerCase())\n    );\n\n    return (\n      <div>\n        <h1 className='title'>THE MODERN POSTS</h1>\n\n        <SearchInput\n          placeholder='Search by post'\n          handleChangeFunction={this.setSearchInputText}\n        />\n\n        <div className='section-title'>\n          <h2>Latest Posts</h2>\n          <hr></hr>\n        </div>\n\n        <PostList posts={filteredPosts} />\n      </div>\n    );\n  }\n\n  /**\n   * Sets state of search input text in order to update UI that depends on data being changed\n   * @param {*} event\n   */\n  setSearchInputText = (event) => {\n    this.setState({ searchInput: event.target.value });\n  };\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/posts')\n      .then((response) => response.json())\n      .then((posts) => this.setState({ posts: posts }));\n  }\n}\n\nexport default HomePage;\n","import { useNavigate } from 'react-router-dom';\n\nimport './back-button.styles.scss';\n\n/**\n * BackButton Component is used to navigate back to the homepage\n * @returns\n */\nconst BackButton = () => {\n  const navigate = useNavigate();\n  return (\n    <div className='back-button'>\n      <button onClick={() => navigate('/')}>\n        <p>Back to Posts</p>\n      </button>\n    </div>\n  );\n};\n\nexport default BackButton;\n","import React from 'react';\n\nimport './post-info.styles.scss';\n\n/**\n * @param object Takes input values title and body\n * Displays title and body of the current post\n * @returns\n */\nconst PostInfo = ({ title, body }) => (\n  <div className='post-info'>\n    <h2>{title}</h2>\n    <p>{body}</p>\n  </div>\n);\n\nexport default PostInfo;\n","import './comment-info.component.styles.scss';\n\n/**\n * @param object Takes input values name, body, and email\n * Displays title, body, and email of the current comment\n */\nconst CommentInfo = ({ name, body, email }) => {\n  return (\n    <div className='comment-info'>\n      <h4>{name}</h4>\n      <p>{email}</p>\n      <p>{body}</p>\n    </div>\n  );\n};\n\nexport default CommentInfo;\n","import './comment-list.styles.scss';\n\n// Components\nimport CommentInfo from '../comment-info/comment-info.component';\n\n/**\n * Loops through comments, displays a list of CommentInfo and count of comments\n * @param object Takes input comments\n * @returns\n */\nconst CommentList = ({ comments }) => (\n  <div className='comment-list'>\n    <h2>Comments ({getCommentsCount(comments)})</h2>\n    {comments.map((comment, index) => (\n      <CommentInfo key={index} {...comment} />\n    ))}\n  </div>\n);\n\n/**\n * Get how many comments are in the array\n * @param comments Array of comments\n * Determines the length of the array and dynamically updates number on the UI\n * @returns number of comments\n */\nfunction getCommentsCount(comments) {\n  return comments.length;\n}\n\nexport default CommentList;\n","import './add-comment.styles.scss';\n\n/**\n * Displays input and textarea elements to use for new comment form\n * @returns\n */\nconst AddComment = () => (\n  <div className='add-comment'>\n    <input placeholder='Name'></input>\n    <input placeholder='Email'></input>\n    <textarea\n      label='comments'\n      placeholder='Enter your comment here..'\n    ></textarea>\n  </div>\n);\n\nexport default AddComment;\n","import './custom-button.styles.scss';\n\n/**\n * @param object Takes input values buttonText and handleOnClickFunction\n * Displays buttonText for button and uses passed in handleOnClickFunction for onClick events\n * @returns\n */\nconst CustomButton = ({ buttonText, handleOnClickFunction }) => {\n  return (\n    <div className='custom-button'>\n      <button onClick={handleOnClickFunction ? handleOnClickFunction : null}>\n        <p>{buttonText}</p>\n      </button>\n    </div>\n  );\n};\n\nexport default CustomButton;\n","import React from 'react';\nimport './comment-form.styles.scss';\n\n// Components\nimport AddComment from '../add-comment/add-comment.component';\nimport CustomButton from '../custom-button/custom-button.component';\n\n/**\n * Form that displays input boxes and a submit button\n * @param obeject Takes in handleOnSubmit to use for onSubmit action\n * @returns\n */\nconst CommentForm = ({ handleOnSubmit }) => {\n  return (\n    <form onSubmit={handleOnSubmit}>\n      <AddComment />\n      <CustomButton buttonText={'Post Comment'} type='submit' />\n    </form>\n  );\n};\n\nexport default CommentForm;\n","import React from 'react';\n\nimport './post-details.styles.scss';\n\n// Components\nimport BackButton from '../../components/back-button/back-button.component';\nimport PostInfo from '../../components/post-info/post-info.component';\nimport CommentList from '../../components/comment-list/comment-list.component';\nimport CommentForm from '../../components/comment-form/comment-form.component';\n\nclass PostDetails extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      postDetails: {},\n      postComments: [],\n    };\n  }\n\n  render() {\n    return (\n      <div className='post-details'>\n        <PostInfo {...this.state.postDetails} />\n        <CommentList comments={this.state.postComments} />\n\n        <div className='comment-header'>\n          <h3>Write A Comment</h3>\n          <hr></hr>\n        </div>\n        <CommentForm handleOnSubmit={this.addComment} />\n        <BackButton />\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    this.callPostsAndCommentsServices();\n  }\n\n  /**\n   * Uses form input values to make an API call in order to save the new comment\n   * Update UI state\n   * Then Reset form on successful API call\n   * @param event Grab data from form event\n   */\n  addComment = async (event) => {\n    // Stop reloading page on form submit\n    event.preventDefault();\n\n    const name = event.target[0].value;\n    const email = event.target[1].value;\n    const comment = event.target[2].value;\n\n    try {\n      const response = await this.callAddCommentService(name, email, comment);\n\n      // Update UI state\n      this.setState({\n        postComments: [\n          ...this.state.postComments,\n          { name: name, email: email, body: comment },\n        ],\n      });\n\n      // Clear form data\n      event.target.reset();\n    } catch (error) {\n      console.error('Error Adding Comment: ', error.message);\n    }\n  };\n\n  /**\n   * POST call to save new comment\n   * @param {*} name string type\n   * @param {*} email string type\n   * @param {*} comment string type\n   * @returns JSON object response from API call\n   */\n  callAddCommentService(name, email, comment) {\n    return fetch('https://jsonplaceholder.typicode.com/posts', {\n      method: 'POST',\n      body: JSON.stringify({\n        name: name,\n        email: email,\n        body: comment,\n      }),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n    }).then((response) => response.json());\n  }\n\n  /**\n   * Calls services in parallel to retrieve Post Details and Post Comments\n   */\n  callPostsAndCommentsServices() {\n    Promise.all([\n      fetch(\n        `https://jsonplaceholder.typicode.com/posts/${this.props.postId}`\n      ).then((response) => response.json()),\n      fetch(\n        `https://jsonplaceholder.typicode.com/posts/${this.props.postId}/comments`\n      ).then((response) => response.json()),\n    ])\n      .then(([postDetails, comments]) => {\n        this.setState({ postDetails: postDetails });\n        this.setState({ postComments: comments });\n      })\n      .catch((error) => {\n        console.error('Error Calling Services: ', error.message);\n      });\n  }\n}\n\nexport default PostDetails;\n","import './App.scss';\nimport { Route, Routes , useParams} from 'react-router-dom';\n\n// Pages\nimport HomePage from './pages/homepage/homepage.component';\nimport PostDetails from './pages/post-details/post-details.component';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Routes>\n        <Route path='/' element={<HomePage />}></Route>\n        <Route path='/post/:postId' element={<GetPostDetails/>}></Route>\n      </Routes>\n    </div>\n  );\n}\n\nfunction GetPostDetails() {\n  let { postId } = useParams();\n  return <PostDetails postId={postId}/>;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}